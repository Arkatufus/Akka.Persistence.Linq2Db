parameters:
  name: ''
  displayName: ''
  vmImage: ''
  outputDirectory: ''
  artifactName: ''
  timeoutInMinutes: 120

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    pool:
      vmImage: ${{ parameters.vmImage }}

    steps:
      - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
        clean: false  # whether to fetch clean each time
        submodules: recursive  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: true

      - task: UseDotNet@2
        displayName: 'Use .NET'
        inputs:
          packageType: 'sdk'
          useGlobalJson: true
          
      - task: AzurePowerShell@2
        displayName: 'Update Release Notes'
        inputs:
          ScriptType: 'FilePath'
          ScriptPath: './build.ps1'
        continueOnError: false

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          arguments: '-c Release'
        continueOnError: false

      # Linux or macOS
      - task: DotNetCoreCLI@2
        displayName: Linux Unit Tests
        inputs:
          command: 'test'
          publishTestResults: true
          arguments: '--no-build -c Release --logger:trx --logger:"console;verbosity=normal"'
          projects: |
            **/*.Tests.csproj
            **/*.DockerTests.csproj
            !**/*.Benchmark.*.csproj
            !**/Examples/**/*.csproj
        continueOnError: true
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )

      # Windows
      - task: DotNetCoreCLI@2
        displayName: Windows Unit Tests
        inputs:
          command: 'test'
          publishTestResults: true
          arguments: '--no-build -c Release --logger:trx --logger:"console;verbosity=normal"'
          projects: |
            **/*.Hosting.Tests.csproj
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: DotNetCoreCLI@2
        displayName: NuGet pack
        inputs:
          command: 'pack'
          includeSymbols: true
          arguments: '--no-build -c Release'
          packDirectory: ${{ parameters.outputDirectory }}
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/*.trx' #TestResults folder usually
          testRunTitle: ${{ parameters.name }}
          mergeTestResults: true
          failTaskOnFailedTests: false
          publishRunAttachments: true

      - task: CopyFiles@2
        displayName: 'Copy Build Output'
        inputs:
          SourceFolder: ${{ parameters.outputDirectory }}
          Contents: '**/*'
          TargetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: ${{ parameters.artifactName }}

      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')
